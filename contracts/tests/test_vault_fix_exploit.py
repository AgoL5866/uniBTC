import brownie
from brownie import accounts, Vault, Sigma, Contract, project, config

# NOTE: This test designed to run on the fork Ethereum network
# Command to run test: `brownie test tests/test_vault_fix_exploit.py --network=mainnet-public-fork`

def test_mint_native_fix_exploit(fn_isolation, deps):
    ProxyAdmin = deps.ProxyAdmin

    alice = accounts.at(accounts[0], True)
    deployer = accounts.at(accounts[1], True)
    multisig = "0xC9dA980fFABbE2bbe15d4734FDae5761B86b5Fc3"

    vault =  Vault.at("0x047d41f2544b7f63a8e991af2068a363d210d6da")
    sigma = Sigma.at(vault.supplyFeeder())

    # Make sure Native BTC is not paused
    pauser = accounts.at("0x9251fd3D79522bB2243a58FFf1dB43E25A495aaB", True)
    native_btc = vault.NATIVE_BTC()
    if (vault.paused(native_btc)):
        vault.unpauseToken(native_btc, {'from': pauser})
    assert not vault.paused(vault.NATIVE_BTC())

    # Make sure cap of Native BTC is zero
    assert vault.caps(native_btc) == 0

    # Make sure Sigma total supply of Native BTC is zero
    assert sigma.totalSupply(native_btc) == 0

    # Scenarios 1: Mint Native BTC should succeed before Vault upgrade
    amt = 1e18
    tx = vault.mint({'from': alice, 'value': amt})
    assert 'Minted' in tx.events

    # Upgrade Vault
    proxyAdmin = ProxyAdmin.at("0x029E4FbDAa31DE075dD74B2238222A08233978f6")

    vault_impl = Vault.deploy({'from': deployer})
    proxyAdmin.upgrade(vault.address, vault_impl, {'from': multisig})

    # Scenarios 2: Mint Native BTC should revert after Vault upgrade
    with brownie .reverts("USR003"):
        vault.mint({'from': alice, 'value': amt})